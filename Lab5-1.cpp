// Lab5.cpp: Листинг программы для Задания 1, 5-й лабораторной работы
// Вариант 8
//***************************************************************************************
// Имя файла : Lab5.cpp
// Резюме : Пример программы написанной на языке программирования С++
// Описание :  
// Программа запрашивает у пользователя абсолютный путь к исходному файлу
//  в формате .txt, закодированному в KOI8-R, затем построчно считывает содержимое файла,
// вычисляет количество гласных и согласных букв, которые в нем содержатся.
// При достижении конца файла программа завершает работу с ним.
// Выводит в файл и на консоль:
// - содержимое исходного файла
// - количество гласных букв в исходном файле;
// - количество согласных букв в исходном файле;
// - путь к результирующему файлу
// Дата создания : 2022 / 02 / 06
// Автор : Студент НГТУ ИРИТ, Халеев А.А., гр. 21-ИВТз
// Платформа : OS Microsoft Windows, MS Visual Studio 2019 (Community)
// **************************************************************************************

/* Подключение модулей */
#include <stdio.h>
#include <iostream>
#include <locale.h>
#include "functions.h"
#include <errno.h>

int main() {
	errno = 0;  // Переменная модуля errno.h, хранящая целочисленный код последней ошибки. 0 - отсутствие ошибок
	
	/* Вызов функции для отображения и работы с символами в кодировке KOI8-R
	(проект также должен быть настроен на работу в этой кодировке) */
	setlocale(LC_ALL, "RUS.20866");

	/* Логотип программы */
	const char* logo = "\n *********************************************************\n\
 * Нижегородский государственный технический университет *\n\
 * Лабораторная работа 5. Задание 1. Вариант 8.          *\n\
 * Выполнил студент группы 21 - ИВТз Халеев Алексей      *\n\
 *********************************************************\n\n";

	char path[STRLEN] = { 0 }; // Нуль-терминированная строка-буфер для ввода и хранения абсолютного пути к исходному файлу
	char out_path[STRLEN] = { 0 }; // Нуль-терминированная строка-буфер для хранения абсолютного пути к результирующему файлу

	/* Счетчики гласных и согласных букв */
	int cnt_vowels{ 0 }, cnt_consonants{ 0 };

	std::set_new_handler(new_error);
	try {
		/* Выделение динамической памяти */
		char* str_buffer = new char[STRLEN]; // Буферная строка для построчного считывания исходного файла
		char* file_buffer = new char[FULLEN]; // Буферная строка для хранения содержимого исходного файла
		char* result_buffer = new char[FULLEN]; // Буферная строка для сборки результата выполнения программы

		FileToBuffer(path, file_buffer, str_buffer); // Построчное считывание исходного файла и накопление данных в строке-буфере
		DefineOutPath(path, out_path); // Определение пути для сохранения результата работы программы
		words_counter(cnt_vowels, cnt_consonants, file_buffer); // Подсчет гласных и согласных букв

		/* Сборка результата выполнения программы для вывода в файл и консоль */
		ResultBufferAssembly(result_buffer, logo, path, file_buffer, cnt_vowels, cnt_consonants);
		PrintBufferToFile(result_buffer, out_path); // Вывод результата в файл
		printf(result_buffer); // Вывод результата на консоль

		/* Освобождение динамической памяти */
		delete[] str_buffer;
		delete[] file_buffer;
		delete[] result_buffer;
	}
	catch (std::exception e) { // Обработка исключения, связанного с выделенимем динамической памяти
		perror("Memory allocation error");
	}
	printf("\n Программа успешно завершена, результат исполнения находится в:\n %s\n\n", out_path);
	system("pause");
	return 0; // Завершение работы программы с кодом 0
}
